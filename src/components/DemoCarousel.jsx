import React, { useState, useEffect } from 'react'
import UniversalEditableText from './UniversalEditableText'
import { useEditMode } from '../hooks/useEditMode'
import useContentManager from '../hooks/useContentManager'

function DemoCarousel({ currentDemo, setCurrentDemo }) {
  // Add edit mode functionality
  const { isEditMode } = useEditMode()
  const { updateContent, updateColor, getColor } = useContentManager()
  
  const demos = [
    {
      id: 1,
      title: 'üèóÔ∏è ◊ê◊®◊õ◊ô◊ò◊ß◊ò◊ï◊®◊™ ◊î◊ô◊ô◊†◊ò◊í◊®◊¶◊ô◊î - ◊î◊í◊©◊® ◊©◊ë◊†◊ô◊™◊ô',
      description: '◊ê◊ô◊ö ◊ë◊†◊ô◊™◊ô ◊í◊©◊® ◊ë◊ô◊ü Claude Code ◊ú◊õ◊ú ◊î◊û◊¢◊®◊õ◊ï◊™ ◊©◊ê◊†◊ô ◊¶◊®◊ô◊ö',
      instruction: '‚öôÔ∏è ◊î◊ê◊™◊® ◊î◊ñ◊î ◊ñ◊î ◊®◊ß ◊ó◊ú◊ß ◊û◊î◊¶◊ï◊®◊î - ◊ë◊ï◊ê◊ï ◊†◊®◊ê◊î ◊ê◊™ ◊õ◊ú ◊î◊û◊¢◊®◊õ◊™:',
      features: [
        '‚úÖ ◊ë◊†◊ô◊™◊ô ◊í◊©◊® ◊ë◊ô◊ü Claude Code ◊ú◊õ◊ú ◊î◊û◊¢◊®◊õ◊ï◊™ ◊©◊ê◊†◊ô ◊¶◊®◊ô◊ö:',
        '  ‚Üí GitHub ◊ú◊†◊ô◊î◊ï◊ú ◊ß◊ï◊ì, Vercel ◊ú◊§◊®◊ô◊°◊î, ◊û◊¢◊®◊õ◊™ ◊ß◊ë◊¶◊ô◊ù ◊û◊™◊ß◊ì◊û◊™,',
        '  ‚Üí ◊ï◊¢◊ï◊ì 4 ◊©◊õ◊ë◊ï◊™ ◊©◊û◊ê◊§◊©◊®◊ï◊™ ◊ú◊ô ◊ú◊¢◊ë◊ï◊ì ◊ë◊ß◊¶◊ë ◊î◊ñ◊î',
        '‚úÖ ◊î◊ß◊û◊™◊ô ◊û◊¢◊®◊õ◊™ ◊ñ◊ô◊õ◊®◊ï◊ü ◊©◊ñ◊ï◊õ◊®◊™ ◊õ◊ú ◊î◊ó◊ú◊ò◊î ◊ê◊®◊õ◊ô◊ò◊ß◊ò◊ï◊†◊ô◊™',
        '‚úÖ ◊ë◊†◊ô◊™◊ô ◊û◊¢◊®◊õ◊™ ◊ê◊ï◊ò◊ï◊û◊¶◊ô◊î ◊©◊û◊™◊ó◊ñ◊ß◊™ ◊ê◊™ ◊¢◊¶◊û◊î'
      ],
      code: `# ◊î◊ê◊ô◊†◊ò◊í◊®◊¶◊ô◊î ◊î◊û◊ú◊ê◊î ◊©◊ë◊†◊ô◊™◊ô:

üß† MCP Memory Server:
   ‚úì ◊ñ◊ï◊õ◊® ◊õ◊ú ◊î◊ó◊ú◊ò◊î ◊ê◊®◊õ◊ô◊ò◊ß◊ò◊ï◊†◊ô◊™
   ‚úì ◊©◊ï◊û◊® context ◊ë◊ô◊ü ◊°◊©◊†◊ô◊ù
   ‚úì ◊û◊ê◊§◊©◊® ◊î◊û◊©◊õ◊ô◊ï◊™ ◊û◊ï◊©◊ú◊û◊™

üíª GitHub Integration:
   ‚úì ◊ô◊¶◊ô◊®◊™ repos ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™
   ‚úì ◊†◊ô◊î◊ï◊ú PRs ◊ïissues
   ‚úì ◊î◊í◊ì◊®◊™ CI/CD pipelines

üöÄ Vercel + ◊§◊®◊ô◊°◊î:
   ‚úì ◊§◊®◊ô◊°◊î ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™ ◊¢◊ú ◊õ◊ú commit
   ‚úì ◊î◊í◊ì◊®◊™ domains ◊ïSSL
   ‚úì ◊û◊ï◊†◊ô◊ò◊ï◊®◊ô◊†◊í ◊ê◊ï◊ò◊ï◊û◊ò◊ô

‚ö° ◊î◊™◊ï◊¶◊ê◊î: ◊ë◊û◊ß◊ï◊ù ◊ú◊†◊î◊ú ◊ë◊ê◊í◊ô◊ù ◊ïconfigs,
             ◊ê◊†◊ô ◊û◊™◊û◊ß◊ì ◊ë◊ë◊†◊ô◊ô◊™ ◊§◊ô◊¶'◊®◊ô◊ù!`
    },
    {
      id: 2,
      title: 'üìö ◊î◊û◊™◊ï◊ì◊ï◊ú◊ï◊í◊ô◊î - ◊ê◊ô◊ö ◊ê◊†◊ô ◊ó◊ï◊©◊ë ◊¢◊ú ◊ß◊ï◊ì',
      description: '◊î◊©◊ô◊†◊ï◊ô ◊î◊û◊†◊ò◊ú◊ô - ◊û◊õ◊™◊ô◊ë◊™ ◊ß◊ï◊ì ◊ú◊ê◊®◊õ◊ô◊ò◊ß◊ò◊ï◊®◊î ◊û◊¢◊®◊õ◊™◊ô◊™',
      instruction: 'üß† ◊î◊©◊ô◊†◊ï◊ô ◊î◊ê◊û◊ô◊™◊ô ◊î◊ï◊ê ◊ë◊ê◊ï◊§◊ü ◊©◊ê◊†◊ô ◊ó◊ï◊©◊ë ◊¢◊ú ◊ß◊ï◊ì:',
      features: [
        '‚úÖ ◊ë◊û◊ß◊ï◊ù "◊ê◊ô◊ö ◊ú◊õ◊™◊ï◊ë ◊ß◊ï◊û◊§◊ï◊†◊†◊ò◊î?", ◊ê◊†◊ô ◊©◊ï◊ê◊ú "◊ê◊ô◊ö ◊î◊û◊¢◊®◊õ◊™ ◊¶◊®◊ô◊õ◊î ◊ú◊î◊ô◊®◊ê◊ï◊™?"',
        '‚úÖ ◊ë◊û◊ß◊ï◊ù ◊ú◊ó◊©◊ï◊ë ◊¢◊ú ◊§◊ï◊†◊ß◊¶◊ô◊ï◊™, ◊ê◊†◊ô ◊ó◊ï◊©◊ë ◊¢◊ú ◊ì◊§◊ï◊°◊ô ◊¢◊ë◊ï◊ì◊î',
        '‚úÖ ◊ë◊û◊ß◊ï◊ù ◊ú◊¢◊°◊ï◊ß ◊ëconfigs, ◊ê◊†◊ô ◊û◊™◊û◊ß◊ì ◊ë◊§◊ô◊¶\'◊®◊ô◊ù',
        '‚úÖ ◊ë◊û◊ß◊ï◊ù ◊ú◊ì◊ê◊ï◊í ◊ú◊ë◊ê◊í◊ô◊ù, ◊ê◊†◊ô ◊ë◊ï◊†◊î ◊û◊¢◊®◊õ◊ï◊™ ◊©◊ú◊ê ◊†◊©◊ë◊®◊ï◊™'
      ],
      code: `# ◊î◊©◊ô◊†◊ï◊ô ◊î◊û◊†◊ò◊ú◊ô ◊©◊ú◊ô:

üë®‚Äçüíª ◊ú◊§◊†◊ô - ◊õ◊™◊ô◊ë◊™ ◊ß◊ï◊ì:
   "◊ê◊ô◊ö ◊ú◊õ◊™◊ï◊ë function ◊©◊¢◊ï◊©◊î X?"
   "◊ê◊ô◊ö ◊ú◊ó◊ë◊® ◊ê◊™ ◊îAPI ◊î◊ñ◊î?"
   "◊ú◊û◊î ◊îconfig ◊î◊ñ◊î ◊ú◊ê ◊¢◊ï◊ë◊ì?"

ü§ñ ◊¢◊õ◊©◊ô◊ï - ◊ê◊®◊õ◊ô◊ò◊ß◊ò◊ï◊®◊î ◊û◊¢◊®◊õ◊™◊ô◊™:
   "◊ê◊ô◊ö ◊î◊û◊©◊™◊û◊© ◊¶◊®◊ô◊ö ◊ú◊ó◊ï◊ï◊™ ◊ê◊™ ◊ñ◊î?"
   "◊ê◊ô◊ö ◊î◊û◊¢◊®◊õ◊™ ◊¶◊®◊ô◊õ◊î ◊ú◊î◊™◊†◊î◊í?"
   "◊ê◊ô◊ö ◊ú◊ë◊†◊ï◊™ ◊©◊ñ◊î ◊ô◊¢◊ë◊ï◊ì ◊í◊ù ◊ë◊¢◊ï◊ì 5 ◊©◊†◊ô◊ù?"

‚ö° ◊î◊™◊ï◊¶◊ê◊î:
   ◊ë◊û◊ß◊ï◊ù ◊ú◊™◊ß◊ü ◊ë◊ê◊í◊ô◊ù, ◊ê◊†◊ô ◊û◊†◊¢ ◊ê◊ï◊™◊ù
   ◊ë◊û◊ß◊ï◊ù ◊ú◊õ◊™◊ï◊ë ◊ß◊ï◊ì, ◊ê◊†◊ô ◊û◊™◊õ◊†◊ü ◊û◊¢◊®◊õ◊ï◊™
   ◊ë◊û◊ß◊ï◊ù ◊ú◊§◊™◊ï◊® ◊ë◊¢◊ô◊ï◊™, ◊ê◊†◊ô ◊ë◊ï◊†◊î ◊§◊™◊®◊ï◊†◊ï◊™`
    },
    {
      id: 3,
      title: '‚ö° ◊î◊ß◊°◊ù - ◊§◊ß◊ï◊ì◊î ◊ê◊ó◊™, ◊§◊®◊ï◊ô◊ß◊ò ◊û◊ú◊ê',
      description: '◊ê◊ô◊ö ◊§◊ß◊ï◊ì◊î ◊ê◊ó◊™ ◊ô◊ï◊¶◊®◊™ ◊§◊®◊ï◊ô◊ß◊ò ◊¢◊ù ◊õ◊ú ◊î◊ê◊ô◊†◊ò◊í◊®◊¶◊ô◊ï◊™',
      instruction: 'üöÄ ◊î◊ê◊ï◊ò◊ï◊û◊¶◊ô◊î ◊î◊ê◊û◊ô◊™◊ô◊™ - ◊®◊ê◊ï ◊û◊î ◊ß◊ï◊®◊î ◊ë◊§◊ß◊ï◊ì◊î ◊ê◊ó◊™:',
      features: [
        '‚úÖ ◊ê◊ó◊®◊ô ◊§◊ß◊ï◊ì◊î ◊ê◊ó◊™ - ◊õ◊ú ◊î◊ê◊ô◊†◊ò◊í◊®◊¶◊ô◊ï◊™ ◊û◊™◊ó◊ë◊®◊ï◊™ ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™',
        '‚úÖ GitHub ◊®◊ô◊§◊ï, Vercel ◊§◊®◊ô◊°◊î, ◊ï◊õ◊ú ◊îconfigs - ◊û◊ï◊õ◊†◊ô◊ù',
        '‚úÖ ◊î◊û◊¢◊®◊õ◊™ "◊ñ◊ï◊õ◊®◊™" ◊ê◊™ ◊§◊®◊ò◊ô ◊î◊§◊®◊ï◊ô◊ß◊ò ◊ï◊©◊ï◊û◊®◊™ ◊¢◊ß◊ë◊ô◊ï◊™',
        '‚úÖ ◊õ◊ú ◊§◊®◊ï◊ô◊ß◊ò ◊û◊ß◊ë◊ú ◊ê◊™ ◊ê◊ï◊™◊î ◊®◊û◊™ ◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™ ◊ï◊ê◊ô◊õ◊ï◊™'
      ],
      code: `# ◊û◊î ◊©◊ß◊ï◊®◊î ◊ë◊§◊ß◊ï◊ì◊î ◊ê◊ó◊™:
./create-project my-awesome-app --type react

‚ö° ◊û◊î ◊©◊ß◊ï◊®◊î ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™:
‚îå‚îÄ GitHub Repository
‚îÇ  ‚úì ◊ô◊ï◊¶◊® ◊®◊ô◊§◊ï ◊ó◊ì◊©
‚îÇ  ‚úì ◊û◊í◊ì◊ô◊® branch protection
‚îÇ  ‚úì ◊û◊ï◊°◊ô◊£ GitHub Actions
‚îÇ
‚îú‚îÄ Vercel Deployment  
‚îÇ  ‚úì ◊û◊ó◊ë◊® ◊ú◊®◊ô◊§◊ï
‚îÇ  ‚úì ◊û◊í◊ì◊ô◊® auto-deploy
‚îÇ  ‚úì ◊û◊ï◊°◊ô◊£ custom domain
‚îÇ
‚îú‚îÄ Development Environment
‚îÇ  ‚úì React + TypeScript + Vite
‚îÇ  ‚úì ESLint + Prettier + Tests
‚îÇ  ‚úì ◊û◊ë◊†◊î ◊™◊ô◊ß◊ô◊ï◊™ ◊û◊ï◊©◊ú◊ù
‚îÇ
‚îî‚îÄ Documentation & Memory
   ‚úì README ◊ê◊ï◊ò◊ï◊û◊ò◊ô
   ‚úì ◊©◊û◊ô◊®◊î ◊ë◊ñ◊ô◊õ◊®◊ï◊ü ◊î◊û◊¢◊®◊õ◊™
   ‚úì ◊î◊ô◊°◊ò◊ï◊®◊ô◊™ ◊î◊ó◊ú◊ò◊ï◊™

üéâ ◊™◊ï◊ö 3 ◊ì◊ß◊ï◊™: ◊û◊®◊¢◊ô◊ï◊ü ◊ú◊§◊®◊ï◊ô◊ß◊ò ◊ó◊ô ◊ë◊ê◊ô◊†◊ò◊®◊†◊ò!`
    }
  ]

  const nextDemo = () => {
    setCurrentDemo((prev) => (prev + 1) % demos.length)
  }

  const prevDemo = () => {
    setCurrentDemo((prev) => (prev - 1 + demos.length) % demos.length)
  }

  useEffect(() => {
    const interval = setInterval(nextDemo, 8000) // Auto-advance every 8 seconds
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="demo-carousel">
      <div className="carousel-container">
        <button className="carousel-btn prev" onClick={prevDemo}>
          ‚Üê
        </button>
        
        <div className="demo-content">
          <div className="demo-header">
            <UniversalEditableText
              id={`demo-title-${currentDemo}`}
              defaultValue={demos[currentDemo].title}
              defaultColor={getColor(`demo-title-${currentDemo}`, '#ffffff')}
              tag="h3"
              isEditMode={isEditMode}
              onUpdate={updateContent}
              onColorUpdate={updateColor}
            />
            <UniversalEditableText
              id={`demo-desc-${currentDemo}`}
              defaultValue={demos[currentDemo].description}
              defaultColor={getColor(`demo-desc-${currentDemo}`, '#ffffff')}
              tag="p"
              isEditMode={isEditMode}
              onUpdate={updateContent}
              onColorUpdate={updateColor}
            />
            {demos[currentDemo].instruction && (
              <div className="demo-instruction">
                <UniversalEditableText
                  id={`demo-instruction-${currentDemo}`}
                  defaultValue={demos[currentDemo].instruction}
                  defaultColor={getColor(`demo-instruction-${currentDemo}`, '#ffffff')}
                  tag="strong"
                  isEditMode={isEditMode}
                  onUpdate={updateContent}
                  onColorUpdate={updateColor}
                />
              </div>
            )}
          </div>
          
          <div className="demo-body">
            <div className="demo-features">
              <UniversalEditableText
                id="demo-features-title"
                defaultValue="◊û◊î ◊™◊®◊ê◊ï ◊õ◊ê◊ü:"
                defaultColor={getColor('demo-features-title', '#ffffff')}
                tag="h4"
                isEditMode={isEditMode}
                onUpdate={updateContent}
                onColorUpdate={updateColor}
              />
              <ul>
                {demos[currentDemo].features.map((feature, index) => (
                  <UniversalEditableText
                    key={index}
                    id={`demo-feature-${currentDemo}-${index}`}
                    defaultValue={feature}
                    defaultColor={getColor(`demo-feature-${currentDemo}-${index}`, '#ffffff')}
                    tag="li"
                    isEditMode={isEditMode}
                    onUpdate={updateContent}
                    onColorUpdate={updateColor}
                  />
                ))}
              </ul>
            </div>
            
            <div className="demo-code">
              <div className="code-header">
                <span>üíª Live Demo</span>
                <div className="code-controls">
                  <div className="code-dot red"></div>
                  <div className="code-dot yellow"></div>
                  <div className="code-dot green"></div>
                </div>
              </div>
              <pre className="code-content">{demos[currentDemo].code}</pre>
            </div>
          </div>
        </div>
        
        <button className="carousel-btn next" onClick={nextDemo}>
          ‚Üí
        </button>
      </div>
      
      <div className="carousel-indicators">
        {demos.map((_, index) => (
          <button
            key={index}
            className={`indicator ${index === currentDemo ? 'active' : ''}`}
            onClick={() => setCurrentDemo(index)}
          />
        ))}
      </div>
    </div>
  )
}

export default DemoCarousel